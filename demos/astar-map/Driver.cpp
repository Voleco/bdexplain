/*
 * $Id: sample.cpp,v 1.23 2006/11/01 23:33:56 nathanst Exp $
 *
 *  sample.cpp
 *  hog
 *
 *  Created by Nathan Sturtevant on 5/31/05.
 *  Copyright 2005 Nathan Sturtevant, University of Alberta. All rights reserved.
 *
 * This file is part of HOG.
 *
 * HOG is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * HOG is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with HOG; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

#include "Common.h"
#include "Driver.h"
#include "UnitSimulation.h"
#include "EpisodicSimulation.h"
#include "Map2DEnvironment.h"
#include "RandomUnits.h"
#include "TemplateAStar.h"
#include "GraphEnvironment.h"
#include "ScenarioLoader.h"
#include "BFS.h"
#include "PEAStar.h"
#include "EPEAStar.h"
#include "MapGenerators.h"
#include "FPUtil.h"
#include "CanonicalGrid.h"

bool mouseTracking = false;
bool runningSearch1 = false;
int px1 = 0, py1 = 0, px2 = 0, py2 = 0;
int gStepsPerFrame = 1;
double searchWeight = 0;
bool recording = false;
void LoadMap(Map *m, int which);
void StartSearch();

TemplateAStar<xyLoc, tDirection, MapEnvironment> a1;
MapEnvironment *me = 0;

std::vector<xyLoc> path;

int main(int argc, char* argv[])
{
	InstallHandlers();
	RunHOGGUI(argc, argv, 1000, 1000);
	return 0;
}


/**
 * Allows you to install any keyboard handlers needed for program interaction.
 */
void InstallHandlers()
{
	InstallKeyboardHandler(MyDisplayHandler, "Cycle Abs. Display", "Cycle which group abstraction is drawn", kAnyModifier, '\t');
	InstallKeyboardHandler(MyDisplayHandler, "Record", "Record the screen.", kNoModifier, 'r');
	InstallKeyboardHandler(MyDisplayHandler, "Pause Simulation", "Pause simulation execution.", kNoModifier, 'p');
	InstallKeyboardHandler(MyDisplayHandler, "Step Simulation", "If the simulation is paused, step forward .1 sec.", kNoModifier, 'o');
	InstallKeyboardHandler(MyDisplayHandler, "Change weight", "Change the search weight", kNoModifier, 'w');
	InstallKeyboardHandler(MyDisplayHandler, "Dijkstra", "Use Dijkstra", kNoModifier, '0');
	InstallKeyboardHandler(MyDisplayHandler, "A*", "Optimal A*", kNoModifier, '1');
	InstallKeyboardHandler(MyDisplayHandler, "WA*(2)", "A* with weight of 2", kNoModifier, '2');
	InstallKeyboardHandler(MyDisplayHandler, "WA*(10)", "A* with weight of 10", kNoModifier, '3');
	InstallKeyboardHandler(MyDisplayHandler, "WA*(100)", "A* with weight of 100", kNoModifier, '4');
	InstallKeyboardHandler(MyDisplayHandler, "Rotate Compression", "Rotate Compression being shown in heuristic", kAnyModifier, '}');
	InstallKeyboardHandler(MyDisplayHandler, "Rotate Displayed Heuristic", "Rotate which heuristic is shown", kAnyModifier, '{');
	InstallKeyboardHandler(MyDisplayHandler, "Reset Rotations", "Reset the current rotation/translation of the map.", kAnyModifier, '|');
	InstallKeyboardHandler(MyDisplayHandler, "Step Abs Type", "Increase abstraction type", kAnyModifier, ']');
	InstallKeyboardHandler(MyDisplayHandler, "Step Abs Type", "Decrease abstraction type", kAnyModifier, '[');
	InstallKeyboardHandler(MyDisplayHandler, "Detail", "Export detailed SVG from A*", kAnyModifier, 'q');
	
	InstallWindowHandler(MyWindowHandler);
	
	InstallMouseClickHandler(MyClickHandler);
}

void MyWindowHandler(unsigned long windowID, tWindowEventType eType)
{
	if (eType == kWindowDestroyed)
	{
		printf("Window %ld destroyed\n", windowID);
		RemoveFrameHandler(MyFrameHandler, windowID, 0);
		
		runningSearch1 = false;
		mouseTracking = false;
	}
	else if (eType == kWindowCreated)
	{
		printf("Window %ld created\n", windowID);
		InstallFrameHandler(MyFrameHandler, windowID, 0);
		ReinitViewports(windowID, {-1, -1, 1, 1}, kScaleToSquare);

		Map *map = new Map(1, 1);
		LoadMap(map, 0);
		map->SetTileSet(kWinter);
		me = new MapEnvironment(map);
		me->SetDiagonalCost(1.5);
	}
	
}

void MyFrameHandler(unsigned long windowID, unsigned int viewport, void *)
{
	Graphics::Display &display = getCurrentContext()->display;

	static bool init = false;
	if (init == false)
	{
		display.StartBackground();
		me->Draw(display);
		display.EndBackground();
		init = true;
	}

	if (mouseTracking)
	{
		me->SetColor(Colors::red);
		me->DrawLine(display,xyLoc(px1, py1), xyLoc(px2, py2));
	}
	
	if (runningSearch1)
	{
		for (int x = 0; x < gStepsPerFrame; x++)
		{
			if (a1.DoSingleSearchStep(path))
			{
//					printf("Solution: moves %d, length %f, %lld nodes, %u on OPEN\n",
//						   (int)path.size(), ma1->GetPathLength(path), a1.GetNodesExpanded(),
//						   a1.GetNumOpenItems());
				runningSearch1 = false;
				break;
			}
		}
	}
	a1.Draw(display);

	if (path.size() != 0)
	{
		me->SetColor(0, 1, 0);
		for (int x = 1; x < path.size(); x++)
		{
			me->DrawLine(display, path[x-1], path[x], 3);
		}

	}
}



void MyDisplayHandler(unsigned long windowID, tKeyboardModifier mod, char key)
{
	char messageString[255];
	switch (key)
	{
		case '|': resetCamera(); break;
		case 'r': recording = !recording; break;
		case '0':
			searchWeight = 0;
			submitTextToBuffer("Algorithm: Dijkstra");
			if (runningSearch1 || path.size() > 0)
				StartSearch();
			break;
		case '1':
			searchWeight = 1;
			submitTextToBuffer("Algorithm: A*");
			if (runningSearch1 || path.size() > 0)
				StartSearch();
			break;
		case '2':
			searchWeight = 2;
			submitTextToBuffer("Algorithm: WA*(2)");
			if (runningSearch1 || path.size() > 0)
				StartSearch();
			break;
		case '3':
			searchWeight = 10;
			submitTextToBuffer("Algorithm: WA*(10)");
			if (runningSearch1 || path.size() > 0)
				StartSearch();
			break;
		case '4':
			searchWeight = 100;
			submitTextToBuffer("Algorithm: WA*(10)");
			if (runningSearch1 || path.size() > 0)
				StartSearch();
			break;
		case 'w':
			if (searchWeight == 0)
				searchWeight = 1.0;
			else if (searchWeight == 1.0)
				searchWeight = 10.0;
			else if (searchWeight == 10.0)
				searchWeight = 100;
			else if (searchWeight == 100.0)
				searchWeight = 0;
			printf("Search weight is %1.2f\n", searchWeight);
			break;
		case '[':
			gStepsPerFrame /= 2;
			sprintf(messageString, "Speed: %d steps per frame\n", gStepsPerFrame);
			submitTextToBuffer(messageString);
			break;
		case ']':
			if (gStepsPerFrame <= 16384)
				gStepsPerFrame *= 2;
			if (gStepsPerFrame == 0)
				gStepsPerFrame = 1;
			sprintf(messageString, "Speed: %d steps per frame\n", gStepsPerFrame);
			submitTextToBuffer(messageString);
			break;
		case '{':
			break;
		case '}':
			break;
		case '\t':
			break;
//		case 'p': unitSims[windowID]->SetPaused(!unitSims[windowID]->GetPaused()); break;
		case 'o':
		{
		}
			break;
		case 'q':
		{
		}
		default:
			break;
	}
}

void StartSearch()
{
	a1.SetStopAfterGoal(true);
	xyLoc s1;
	xyLoc g1;
	s1.x = px1; s1.y = py1;
	g1.x = px2; g1.y = py2;
	
	a1.SetWeight(searchWeight);
	me->SetEightConnected();
	a1.InitializeSearch(me, s1, g1, path);
	mouseTracking = false;
	runningSearch1 = true;
}

bool MyClickHandler(unsigned long windowID, int, int, point3d loc, tButtonType button, tMouseEventType mType)
{
	if (button == kLeftButton)
	{
		switch (mType)
		{
			case kMouseDown:
			{
				int x, y;
				me->GetMap()->GetPointFromCoordinate(loc, x, y);
				if ((me->GetMap()->GetTerrainType(x, y)>>terrainBits) != (kGround>>terrainBits))
					break;

				px1 = px2 = x;
				py1 = py2 = y;
				path.resize(0);
				mouseTracking = true;
			}
				break;
			case kMouseDrag:
			{
				if (!mouseTracking)
					break;
				int x, y;
				me->GetMap()->GetPointFromCoordinate(loc, x, y);
				if ((me->GetMap()->GetTerrainType(x, y)>>terrainBits) == (kGround>>terrainBits))
				{
					px2 = x;
					py2 = y;
				}
			}
				break;
			case kMouseUp:
			{
				if (!mouseTracking)
					break;
				int x, y;
				me->GetMap()->GetPointFromCoordinate(loc, x, y);
				if ((me->GetMap()->GetTerrainType(x, y)>>terrainBits) == (kGround>>terrainBits))
				{
					px2 = x;
					py2 = y;
				}
				StartSearch();
			}
				break;
		}
		return true;
	}
	return false;
}




void BGMap2(Map *m)
{
	m->Scale(148, 139);
	const char map
	int which = 0;
	for (int y = 0; y < m->GetMapHeight(); y++)
	{
		for (int x = 0; x < m->GetMapWidth(); x++)
		{
			if (map[which] == '.')
				m->SetTerrainType(x, y, kGround);
			else
				m->SetTerrainType(x, y, kOutOfBounds);
			which++;
		}
	}
}


void LoadMap(Map *m, int which)
{
	assert(m != 0);
	BGMap2(m);
}

